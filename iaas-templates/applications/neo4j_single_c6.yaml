heat_template_version: 2013-05-23

description: Neo4j Single CentOS 6

parameters:
  keypair_name:
    type: string
    label: keypair_name for all servers
    description: k5user keypair for all servers

  availability_zone:
    type: string
    label: availability_zone
    description: existing availability_zone

  dns_nameservers:
    type: comma_delimited_list
    description: dns name servers.
    default: ['133.162.193.9', '133.162.193.10']

  network_id:
    type: string
    label: Network ID
    description: existing network id

  subnet_id:
    type: string
    label: Subnet ID
    description: existing subnet id

  remote_host_cidr:
    type: string
    label: Host CIDR
    description: existing remote Host CIDR
    default: 0.0.0.0/0

  flavor:
    type: string
    label: Flavor
    default: S-1

resources:
  neo4j_single_c6:
    type: OS::Nova::Server
    properties:
      name: neo4j_single_c6
      key_name: { get_param: keypair_name }
      availability_zone: { get_param: availability_zone }
      block_device_mapping:
      - device_name: vda
        volume_id: {get_resource: neo4j_single_c6_systemvolume }
      flavor: { get_param: flavor }
      networks: [{"port": { get_resource: neo4j_single_c6_port }}]
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #cloud-config
            write_files:
            - path: /root/install.sh
              permissions: '0755'
              owner: root:root
              content: |
                #!/bin/bash
                echo -e '----Start installing VM----\n\n'

                yum -y update


                echo -e '--Download and Install JDK 1.8.0--\n'
                cd /tmp
                wget --no-check-certificate --no-cookies --header "Cookie: oraclelicense=accept-securebackup-cookie" http://download.oracle.com/otn-pub/java/jdk/8u102-b14/jdk-8u102-linux-x64.rpm
                yum localinstall -y --nogpgcheck jdk-8u102-linux-x64.rpm

                echo -e '--Download and Install Neo4j 3.0.6--\n'
                cd /tmp
                wget -O neo4j-community-3.0.6-unix.tar.gz "https://neo4j.com/artifact.php?name=neo4j-community-3.0.6-unix.tar.gz"
                tar -xzf neo4j-community-3.0.6-unix.tar.gz
                mv neo4j-community-3.0.6 /usr/

                cat >> /usr/neo4j-community-3.0.6/conf/neo4j.conf << "EOS"
                dbms.connector.bolt.address=$neo4j_single_c6_IPADDR:7474
                dbms.logs.http.enabled=true
                EOS

                echo -e '--Set SELinux boolean httpd_can_network_connect to on--\n'
                setsebool -P httpd_can_network_connect on
                setenforce 0

                echo -e '--Start Neo4j--\n'
                /usr/neo4j-community-3.0.6/bin/neo4j start

            runcmd:
              - cat /root/install.sh > /var/log/install.log
              - echo -e "\n-- installer log --\n" >> /var/log/install.log
              - /root/install.sh >> /var/log/install.log

          params:
            $neo4j_single_c6_IPADDR: { get_attr: [ neo4j_single_c6_port , fixed_ips, 0, ip_address ] }

  neo4j_single_c6_port:
    type: OS::Neutron::Port
    properties:
      name: neo4j_single_c6_port
      network_id: { get_param: network_id }
      availability_zone: { get_param: availability_zone }
      security_groups:
        - {get_resource: neo4j_single_c6_common_security_group }
      fixed_ips:
        - subnet_id: { get_param: subnet_id }

  neo4j_single_c6_systemvolume:
    type: OS::Cinder::Volume
    properties:
      availability_zone: { get_param: availability_zone }
      description:
      image: CentOS 6.5 64bit (English) 05
      name: neo4j_single_c6_systemvolume
      size: 30
      volume_type: M1

  neo4j_single_c6_common_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      name: neo4j_single_c6_common_security_group
      rules:
        # ICMP
        - { direction: ingress, ethertype: IPv4, protocol: icmp, remote_ip_prefix: { get_param: remote_host_cidr } }
        # SSH
        - { direction: ingress, ethertype: IPv4, port_range_min: 22, port_range_max: 22, protocol: tcp, remote_ip_prefix: { get_param: remote_host_cidr } }
        # HTTP
        - { direction: egress, ethertype: IPv4, port_range_min: 80, port_range_max: 80, protocol: tcp, remote_ip_prefix: 0.0.0.0/0 }
        # HTTPS
        - { direction: egress, ethertype: IPv4, port_range_min: 443, port_range_max: 443, protocol: tcp, remote_ip_prefix: 0.0.0.0/0 }
        # DNS
        - { direction: egress, ethertype: IPv4, port_range_min: 53, port_range_max: 53, protocol: tcp, remote_ip_prefix: { get_param: [dns_nameservers, 0] } }
        - { direction: egress, ethertype: IPv4, port_range_min: 53, port_range_max: 53, protocol: tcp, remote_ip_prefix: { get_param: [dns_nameservers, 1] } }
        - { direction: egress, ethertype: IPv4, port_range_min: 53, port_range_max: 53, protocol: udp, remote_ip_prefix: { get_param: [dns_nameservers, 0] } }
        - { direction: egress, ethertype: IPv4, port_range_min: 53, port_range_max: 53, protocol: udp, remote_ip_prefix: { get_param: [dns_nameservers, 1] } }
        # metadata
        - { direction: egress, port_range_max: 80, port_range_min: 80, protocol: tcp, remote_ip_prefix: 169.254.169.254/32 }
        # for neo4j
        - { direction: ingress, ethertype: IPv4, port_range_min: 7474, port_range_max: 7474, protocol: tcp, remote_ip_prefix: 0.0.0.0/0 }

outputs:
  neo4j_single_c6_IP:
    value:
      str_replace:
        template: http://$ADDRESS/
        params:
          $ADDRESS: { get_attr: [ neo4j_single_c6_port, fixed_ips, 0, ip_address ] }
    description: neo4j_single_c6 IP Address
