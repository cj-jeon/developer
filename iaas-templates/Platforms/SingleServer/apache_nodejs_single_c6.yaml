heat_template_version: 2013-05-23

description: Apache + Node.js Single CentOS 6

parameters:

  keypair_name:
    type: string
    label: keypair_name for all servers
    description: k5user keypair for all servers

  availability_zone:
    type: string
    label: availability_zone
    description: existing availability_zone

  dns_nameservers:
    type: comma_delimited_list
    description: dns name servers.
    default: ['133.162.193.9', '133.162.193.10']

  network_id:
    type: string
    label: Network ID
    description: existing network id

  subnet_id:
    type: string
    label: Subnet ID
    description: existing subnet id

  remote_host_cidr:
    type: string
    label: Host CIDR
    description: existing remote Host CIDR
    default: 0.0.0.0/0

  flavor:
    type: string
    label: Flavor
    default: S-1

resources:

  apache_nodejs_single_c6:
    type: OS::Nova::Server
    properties:
      name: apache_nodejs_single_c6
      key_name: { get_param: keypair_name }
      availability_zone: { get_param: availability_zone }
      block_device_mapping:
      - device_name: vda
        volume_id: {get_resource: apache_nodejs_single_c6_systemvolume }
      flavor: { get_param: flavor }
      networks: [{"port": { get_resource: apache_nodejs_single_c6_port }}]
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #cloud-config
            write_files:
            - path: /root/install.sh
              permissions: '0755'
              owner: root:root
              content: |
                #!/bin/bash
                echo -e '----Start installing VM----\n\n'

                echo -e '--Update system--\n'
                yum -y update

                echo -e '--Install wget and httpd--\n'
                yum -y install wget
                yum -y install httpd

                echo -e '--Modify /etc/httpd/conf/httpd.conf--\n'
                sed -i '/^#ServerName www\.example\.com:80$/a ServerName *:80' /etc/httpd/conf/httpd.conf
                sed -i '/^#NameVirtualHost \*:80$/a NameVirtualHost *:80'  /etc/httpd/conf/httpd.conf
                cat >> /etc/httpd/conf/httpd.conf << 'EOS'
                <VirtualHost *:80>
                    ProxyPreserveHost On
                    ServerName localhost
                    ProxyPass / http://127.0.0.1:3000/
                    ProxyPassReverse / http://127.0.0.1:3000/
                </VirtualHost>
                EOS

                echo -e '--Install node.js--\n'
                curl --silent --location https://rpm.nodesource.com/setup_4.x | bash -
                yum -y install nodejs

                echo -e '--Create node.js http server--\n'
                cat >> /usr/etc/node-http.js << 'EOS'
                var http = require('http');

                http.createServer(function (req, res) {

                    res.writeHead(200, {'Content-Type': 'text/plain'});
                    res.write('Hello World!!');
                    res.end();

                }).listen(3000);
                EOS
                #//}).listen(3000, '127.0.0.1');

                echo -e '--Set SELinux boolean httpd_can_network_connect to on--\n'
                setsebool -P httpd_can_network_connect 1

                echo -e '--Service start httpd and node.js--\n'
                node /usr/etc/node-http.js &

                service httpd start
                chkconfig httpd on

            runcmd:
              - cat /root/install.sh > /var/log/install.log
              - echo -e "\n-- installer log --\n" >> /var/log/install.log
              - /root/install.sh >> /var/log/install.log

          params:
            $apache_nodejs_single_c6_IPADDR: { get_attr: [ apache_nodejs_single_c6_port , fixed_ips, 0, ip_address ] }

  apache_nodejs_single_c6_port:
    type: OS::Neutron::Port
    properties:
      name: apache_nodejs_single_c6_port
      network_id: { get_param: network_id }
      availability_zone: { get_param: availability_zone }
      security_groups:
        - {get_resource: apache_nodejs_single_c6_common_security_group }
      fixed_ips:
        - subnet_id: { get_param: subnet_id }

  apache_nodejs_single_c6_systemvolume:
    type: OS::Cinder::Volume
    properties:
      availability_zone: { get_param: availability_zone }
      description:
      image: CentOS 6.5 64bit (English) 05
      name: apache_nodejs_single_c6_systemvolume
      size: 30
      volume_type: M1

  apache_nodejs_single_c6_common_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      name: apache_nodejs_single_c6_common_security_group
      rules:
        # ICMP
        - { direction: ingress, ethertype: IPv4, protocol: icmp, remote_ip_prefix: { get_param: remote_host_cidr } }
        # SSH
        - { direction: ingress, ethertype: IPv4, port_range_min: 22, port_range_max: 22, protocol: tcp, remote_ip_prefix: { get_param: remote_host_cidr } }
        # HTTP
        - { direction: egress, ethertype: IPv4, port_range_min: 80, port_range_max: 80, protocol: tcp, remote_ip_prefix: 0.0.0.0/0 }
        # HTTPS
        - { direction: egress, ethertype: IPv4, port_range_min: 443, port_range_max: 443, protocol: tcp, remote_ip_prefix: 0.0.0.0/0 }
        # DNS
        - { direction: egress, ethertype: IPv4, port_range_min: 53, port_range_max: 53, protocol: tcp, remote_ip_prefix: { get_param: [dns_nameservers, 0] } }
        - { direction: egress, ethertype: IPv4, port_range_min: 53, port_range_max: 53, protocol: tcp, remote_ip_prefix: { get_param: [dns_nameservers, 1] } }
        - { direction: egress, ethertype: IPv4, port_range_min: 53, port_range_max: 53, protocol: udp, remote_ip_prefix: { get_param: [dns_nameservers, 0] } }
        - { direction: egress, ethertype: IPv4, port_range_min: 53, port_range_max: 53, protocol: udp, remote_ip_prefix: { get_param: [dns_nameservers, 1] } }
        # metadata
        - { direction: egress, port_range_max: 80, port_range_min: 80, protocol: tcp, remote_ip_prefix: 169.254.169.254/32 }


outputs:
  apache_nodejs_single_c61_IP:
    value:
      str_replace:
        template: http://$ADDRESS/
        params:
          $ADDRESS: { get_attr: [ apache_nodejs_single_c6_port, fixed_ips, 0, ip_address ] }
    description: apache_nodejs_single_c6 IP Address

